import { drizzle } from 'drizzle-orm/neon-http';
import { neon } from "@neondatabase/serverless";
import { pgTable, text, integer, timestamp, boolean, decimal, jsonb } from "drizzle-orm/pg-core";

if (!process.env.DATABASE_URL) {
  throw new Error("DATABASE_URL environment variable is required");
}

// Define database tables
export const users = pgTable('users', {
  id: text('id').primaryKey(),
  firstName: text('first_name').notNull(),
  lastName: text('last_name').notNull(),
  email: text('email').notNull().unique(),
  password: text('password').notNull(),
  phone: text('phone'),
  role: text('role').notNull().default('tenant'),
  isActive: boolean('is_active').notNull().default(true),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const properties = pgTable("properties", {
  id: text("id").primaryKey(),
  name: text("name").notNull(),
  address: text("address").notNull(),
  city: text("city").notNull(),
  state: text("state").notNull(),
  zipCode: text("zip_code").notNull(),
  totalUnits: integer("total_units").notNull(),
  purchasePrice: text("purchase_price"),
  purchaseDate: timestamp("purchase_date"),
  propertyType: text("property_type").notNull(),
  status: text("status").notNull(),
  createdAt: timestamp("created_at").notNull(),
  updatedAt: timestamp("updated_at").notNull(),
});

export const units = pgTable('units', {
  id: text('id').primaryKey(),
  propertyId: text('property_id').notNull(),
  unitNumber: text('unit_number').notNull(),
  bedrooms: integer('bedrooms').notNull(),
  bathrooms: decimal('bathrooms').notNull(),
  rentAmount: decimal('rent_amount'),
  status: text('status').notNull().default('vacant'),
  squareFootage: integer('square_footage'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const tenants = pgTable('tenants', {
  id: text('id').primaryKey(),
  firstName: text('first_name').notNull(),
  lastName: text('last_name').notNull(),
  email: text('email').notNull(),
  phone: text('phone').notNull(),
  unitId: text('unit_id'),
  leaseStart: timestamp('lease_start'),
  leaseEnd: timestamp('lease_end'),
  monthlyRent: decimal('monthly_rent'),
  deposit: decimal('deposit'),
  status: text('status').notNull().default('pending'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const expenses = pgTable('expenses', {
  id: text('id').primaryKey(),
  propertyId: text('property_id').notNull(),
  category: text('category').notNull(),
  description: text('description').notNull(),
  amount: decimal('amount').notNull(),
  date: timestamp('date').notNull(),
  isRecurring: boolean('is_recurring').notNull().default(false),
  vendorName: text('vendor_name'),
  notes: text('notes'),
  startDate: timestamp('start_date'),
  endDate: timestamp('end_date'),
  documentPath: text('document_path'),
  accountNumber: text('account_number'),
  policyEffectiveDate: timestamp('policy_effective_date'),
  policyExpirationDate: timestamp('policy_expiration_date'),
  meterReadingStart: text('meter_reading_start'),
  meterReadingEnd: text('meter_reading_end'),
  usageAmount: text('usage_amount'),
  attachmentUrl: text('attachment_url'),
  recurrencePeriod: text('recurrence_period'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const maintenanceRequests = pgTable('maintenance_requests', {
  id: text('id').primaryKey(),
  unitId: text('unit_id').notNull(),
  tenantId: text('tenant_id'),
  title: text('title').notNull(),
  description: text('description').notNull(),
  priority: text('priority').notNull().default('medium'),
  status: text('status').notNull().default('open'),
  submittedDate: timestamp('submitted_date').notNull().defaultNow(),
  completedDate: timestamp('completed_date'),
  vendorId: text('vendor_id'),
  laborCost: decimal('labor_cost'),
  materialCost: decimal('material_cost'),
  notes: text('notes').default(''),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const vendors = pgTable('vendors', {
  id: text('id').primaryKey(),
  name: text('name').notNull(),
  email: text('email').notNull(),
  phone: text('phone').notNull(),
  specialty: text('specialty').notNull(),
  address: text('address').notNull(),
  city: text('city').notNull(),
  state: text('state').notNull(),
  zipCode: text('zip_code').notNull(),
  rating: decimal('rating'),
  isActive: boolean('is_active').notNull().default(true),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const rentPayments = pgTable('rent_payments', {
  id: text('id').primaryKey(),
  tenantId: text('tenant_id').notNull(),
  unitId: text('unit_id').notNull(),
  amount: decimal('amount').notNull(),
  dueDate: timestamp('due_date').notNull(),
  paidDate: timestamp('paid_date'),
  status: text('status').notNull().default('pending'),
  paymentMethod: text('payment_method'),
  notes: text('notes'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const mortgages = pgTable('mortgages', {
  id: text('id').primaryKey(),
  propertyId: text('property_id').notNull(),
  lender: text('lender').notNull(),
  originalAmount: decimal('original_amount').notNull(),
  currentBalance: decimal('current_balance').notNull(),
  interestRate: decimal('interest_rate').notNull(),
  monthlyPayment: decimal('monthly_payment').notNull(),
  principalAmount: decimal('principal_amount').notNull(),
  interestAmount: decimal('interest_amount').notNull(),
  escrowAmount: decimal('escrow_amount'),
  startDate: timestamp('start_date').notNull(),
  termYears: integer('term_years').notNull(),
  accountNumber: text('account_number'),
  notes: text('notes'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const tasks = pgTable('tasks', {
  id: text('id').primaryKey(),
  title: text('title').notNull(),
  description: text('description').notNull(),
  priority: text('priority').notNull().default('medium'),
  status: text('status').notNull().default('pending'),
  dueDate: timestamp('due_date'),
  assignedTo: text('assigned_to'),
  propertyId: text('property_id'),
  unitId: text('unit_id'),
  tenantId: text('tenant_id'),
  vendorId: text('vendor_id'),
  rentPaymentId: text('rent_payment_id'),
  category: text('category').notNull(),
  notes: text('notes'),
  isRecurring: boolean('is_recurring').default(false),
  recurrencePeriod: text('recurrence_period'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

// 1. Lease Management System
export const leases = pgTable('leases', {
  id: text('id').primaryKey(),
  tenantId: text('tenant_id').notNull(),
  unitId: text('unit_id').notNull(),
  propertyId: text('property_id').notNull(),
  startDate: timestamp('start_date').notNull(),
  endDate: timestamp('end_date').notNull(),
  monthlyRent: decimal('monthly_rent').notNull(),
  securityDeposit: decimal('security_deposit').notNull(),
  status: text('status').notNull().default('draft'),
  renewalDate: timestamp('renewal_date'),
  escalationRate: decimal('escalation_rate'),
  escalationFrequency: text('escalation_frequency'),
  lateFeePolicyId: text('late_fee_policy_id'),
  petDeposit: decimal('pet_deposit'),
  parkingFee: decimal('parking_fee'),
  utilitiesIncluded: jsonb('utilities_included').default([]),
  terms: text('terms').notNull(),
  signedDate: timestamp('signed_date'),
  isDigitallySigned: boolean('is_digitally_signed').default(false),
  documentPath: text('document_path'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const leaseRenewals = pgTable('lease_renewals', {
  id: text('id').primaryKey(),
  leaseId: text('lease_id').notNull(),
  proposedStartDate: timestamp('proposed_start_date').notNull(),
  proposedEndDate: timestamp('proposed_end_date').notNull(),
  proposedRent: decimal('proposed_rent').notNull(),
  status: text('status').notNull().default('pending'),
  sentDate: timestamp('sent_date').notNull(),
  responseDate: timestamp('response_date'),
  notes: text('notes'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const securityDeposits = pgTable('security_deposits', {
  id: text('id').primaryKey(),
  leaseId: text('lease_id').notNull(),
  amount: decimal('amount').notNull(),
  dateReceived: timestamp('date_received').notNull(),
  dateReturned: timestamp('date_returned'),
  amountReturned: decimal('amount_returned'),
  deductions: jsonb('deductions').default([]),
  status: text('status').notNull().default('held'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

// 2. Document Management System
export const documents = pgTable('documents', {
  id: text('id').primaryKey(),
  name: text('name').notNull(),
  type: text('type').notNull(),
  filePath: text('file_path').notNull(),
  fileSize: integer('file_size').notNull(),
  mimeType: text('mime_type').notNull(),
  propertyId: text('property_id'),
  unitId: text('unit_id'),
  tenantId: text('tenant_id'),
  leaseId: text('lease_id'),
  maintenanceRequestId: text('maintenance_request_id'),
  uploadedBy: text('uploaded_by').notNull(),
  description: text('description'),
  expirationDate: timestamp('expiration_date'),
  isArchived: boolean('is_archived').default(false),
  tags: jsonb('tags').default([]),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const inspectionReports = pgTable('inspection_reports', {
  id: text('id').primaryKey(),
  propertyId: text('property_id').notNull(),
  unitId: text('unit_id'),
  inspectorId: text('inspector_id').notNull(),
  type: text('type').notNull(),
  scheduledDate: timestamp('scheduled_date').notNull(),
  completedDate: timestamp('completed_date'),
  status: text('status').notNull().default('scheduled'),
  overallCondition: text('overall_condition'),
  notes: text('notes'),
  items: jsonb('items').default([]),
  photos: jsonb('photos').default([]),
  documentPath: text('document_path'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const insurancePolicies = pgTable('insurance_policies', {
  id: text('id').primaryKey(),
  propertyId: text('property_id').notNull(),
  policyNumber: text('policy_number').notNull(),
  provider: text('provider').notNull(),
  type: text('type').notNull(),
  coverageAmount: decimal('coverage_amount').notNull(),
  premium: decimal('premium').notNull(),
  deductible: decimal('deductible').notNull(),
  effectiveDate: timestamp('effective_date').notNull(),
  expirationDate: timestamp('expiration_date').notNull(),
  agentName: text('agent_name'),
  agentContact: text('agent_contact'),
  autoRenewal: boolean('auto_renewal').default(false),
  documentPath: text('document_path'),
  status: text('status').notNull().default('active'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

// 3. Communication Hub
export const messages = pgTable('messages', {
  id: text('id').primaryKey(),
  senderId: text('sender_id').notNull(),
  recipientId: text('recipient_id').notNull(),
  subject: text('subject').notNull(),
  content: text('content').notNull(),
  type: text('type').notNull().default('message'),
  priority: text('priority').notNull().default('normal'),
  status: text('status').notNull().default('sent'),
  propertyId: text('property_id'),
  unitId: text('unit_id'),
  maintenanceRequestId: text('maintenance_request_id'),
  attachments: jsonb('attachments').default([]),
  readAt: timestamp('read_at'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const notifications = pgTable('notifications', {
  id: text('id').primaryKey(),
  userId: text('user_id').notNull(),
  title: text('title').notNull(),
  message: text('message').notNull(),
  type: text('type').notNull(),
  category: text('category').notNull(),
  isRead: boolean('is_read').default(false),
  actionUrl: text('action_url'),
  propertyId: text('property_id'),
  scheduledFor: timestamp('scheduled_for'),
  sentAt: timestamp('sent_at'),
  metadata: jsonb('metadata'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const communicationTemplates = pgTable('communication_templates', {
  id: text('id').primaryKey(),
  name: text('name').notNull(),
  type: text('type').notNull(),
  category: text('category').notNull(),
  subject: text('subject'),
  content: text('content').notNull(),
  variables: jsonb('variables').default([]),
  isActive: boolean('is_active').default(true),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

// 4. Advanced Reporting & Analytics
export const reports = pgTable('reports', {
  id: text('id').primaryKey(),
  name: text('name').notNull(),
  type: text('type').notNull(),
  generatedBy: text('generated_by').notNull(),
  parameters: jsonb('parameters').notNull(),
  dataRange: jsonb('data_range').notNull(),
  filePath: text('file_path').notNull(),
  status: text('status').notNull().default('generating'),
  propertyIds: jsonb('property_ids').default([]),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const marketAnalyses = pgTable('market_analyses', {
  id: text('id').primaryKey(),
  propertyId: text('property_id').notNull(),
  analysisDate: timestamp('analysis_date').notNull(),
  marketRent: decimal('market_rent').notNull(),
  currentRent: decimal('current_rent').notNull(),
  variance: decimal('variance').notNull(),
  confidenceLevel: text('confidence_level').notNull(),
  comparableProperties: jsonb('comparable_properties').default([]),
  recommendations: text('recommendations'),
  dataSource: text('data_source').notNull(),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

// 5. Payment Processing & Integration
export const payments = pgTable('payments', {
  id: text('id').primaryKey(),
  tenantId: text('tenant_id').notNull(),
  leaseId: text('lease_id').notNull(),
  amount: decimal('amount').notNull(),
  method: text('method').notNull(),
  status: text('status').notNull().default('pending'),
  type: text('type').notNull(),
  dueDate: timestamp('due_date').notNull(),
  paidDate: timestamp('paid_date'),
  lateFee: decimal('late_fee'),
  reference: text('reference'),
  transactionId: text('transaction_id'),
  processorFee: decimal('processor_fee'),
  notes: text('notes'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const integrations = pgTable('integrations', {
  id: text('id').primaryKey(),
  name: text('name').notNull(),
  type: text('type').notNull(),
  provider: text('provider').notNull(),
  apiKey: text('api_key').notNull(),
  apiSecret: text('api_secret'),
  webhookUrl: text('webhook_url'),
  settings: jsonb('settings'),
  isActive: boolean('is_active').default(true),
  lastSync: timestamp('last_sync'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

// 6. Background Checks & Credit Reports
export const backgroundChecks = pgTable('background_checks', {
  id: text('id').primaryKey(),
  tenantId: text('tenant_id').notNull(),
  applicationId: text('application_id'),
  provider: text('provider').notNull(),
  status: text('status').notNull().default('pending'),
  score: integer('score'),
  reportUrl: text('report_url'),
  criminalHistory: boolean('criminal_history'),
  evictionHistory: boolean('eviction_history'),
  creditScore: integer('credit_score'),
  monthlyIncome: decimal('monthly_income'),
  employmentVerified: boolean('employment_verified'),
  recommendation: text('recommendation'),
  expirationDate: timestamp('expiration_date'),
  cost: decimal('cost'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

// 7. Compliance & Legal
export const complianceItems = pgTable('compliance_items', {
  id: text('id').primaryKey(),
  propertyId: text('property_id').notNull(),
  type: text('type').notNull(),
  title: text('title').notNull(),
  description: text('description').notNull(),
  requirement: text('requirement').notNull(),
  status: text('status').notNull().default('pending_review'),
  dueDate: timestamp('due_date'),
  completedDate: timestamp('completed_date'),
  authority: text('authority').notNull(),
  documentPath: text('document_path'),
  cost: decimal('cost'),
  renewalFrequency: text('renewal_frequency'),
  nextRenewalDate: timestamp('next_renewal_date'),
  reminderDays: integer('reminder_days').default(30),
  assignedTo: text('assigned_to'),
  notes: text('notes'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const evictionProcesses = pgTable('eviction_processes', {
  id: text('id').primaryKey(),
  tenantId: text('tenant_id').notNull(),
  leaseId: text('lease_id').notNull(),
  reason: text('reason').notNull(),
  startDate: timestamp('start_date').notNull(),
  status: text('status').notNull().default('notice_served'),
  noticeType: text('notice_type').notNull(),
  noticeServedDate: timestamp('notice_served_date'),
  courtFilingDate: timestamp('court_filing_date'),
  hearingDate: timestamp('hearing_date'),
  judgmentDate: timestamp('judgment_date'),
  amountOwed: decimal('amount_owed'),
  legalFees: decimal('legal_fees'),
  attorney: text('attorney'),
  documents: jsonb('documents').default([]),
  notes: text('notes'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

export const permits = pgTable('permits', {
  id: text('id').primaryKey(),
  propertyId: text('property_id').notNull(),
  type: text('type').notNull(),
  permitNumber: text('permit_number').notNull(),
  issuer: text('issuer').notNull(),
  description: text('description').notNull(),
  issueDate: timestamp('issue_date').notNull(),
  expirationDate: timestamp('expiration_date'),
  cost: decimal('cost').notNull(),
  status: text('status').notNull().default('pending'),
  renewalRequired: boolean('renewal_required').default(false),
  documentPath: text('document_path'),
  contactPerson: text('contact_person'),
  contactPhone: text('contact_phone'),
  notes: text('notes'),
  createdAt: timestamp('created_at').notNull().defaultNow(),
  updatedAt: timestamp('updated_at').notNull().defaultNow(),
});

const sql = neon(process.env.DATABASE_URL);

const schema = {
  users,
  properties,
  units,
  tenants,
  expenses,
  maintenanceRequests,
  vendors,
  rentPayments,
  mortgages,
  tasks,
  // Advanced feature tables
  leases,
  leaseRenewals,
  securityDeposits,
  documents,
  inspectionReports,
  insurancePolicies,
  messages,
  notifications,
  communicationTemplates,
  reports,
  marketAnalyses,
  payments,
  integrations,
  backgroundChecks,
  complianceItems,
  evictionProcesses,
  permits,
};

export const db = drizzle(sql, { schema });